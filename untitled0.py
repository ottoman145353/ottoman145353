# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YYx8xqDu_0z3oDQJChkXFC4qk8gUqtif
"""

import cv2
import numpy as np

def detect_contact(frame1, frame2):
  # Convert frames to grayscale
  gray1 = cv2.cvtColor(frame1, cv2.COLOR_BGR2GRAY)
  gray2 = cv2.cvtColor(frame2, cv2.COLOR_BGR2GRAY)

  # Calculate absolute difference between frames
  diff = cv2.absdiff(gray1, gray2)

  # Threshold the difference image
  thresh = cv2.threshold(diff, 25, 255, cv2.THRESH_BINARY)[1]

  # Find contours in the thresholded image
  contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

  # Calculate the area of each contour
  areas = [cv2.contourArea(contour) for contour in contours]

  # Filter out small contours
  filtered_contours = [contour for contour, area in zip(contours, areas) if area > 50]

  # Return the number of filtered contours
  return len(filtered_contours)

# @title Varsayılan başlık metni
def calculate_percentage(part, whole):
  """
  Calculates the percentage of a part with respect to a whole.

  Args:
    part: The part value.
    whole: The whole value.

  Returns:
    The percentage of the part with respect to the whole.
  """
  return (part / whole) * 100

# Example usage
part = 50
whole = 200
percentage = calculate_percentage(part, whole)
print(f"{part} is {percentage}% of {whole}")

def detect_contact(frame1, frame2):
  # Convert frames to grayscale
  gray1 = cv2.cvtColor(frame1, cv2.COLOR_BGR2GRAY)
  gray2 = cv2.cvtColor(frame2, cv2.COLOR_BGR2GRAY)

  # Calculate absolute difference between frames
  diff = cv2.absdiff(gray1, gray2)

  # Threshold the difference image
  thresh = cv2.threshold(diff, 25, 255, cv2.THRESH_BINARY)[1]

  # Find contours in the thresholded image
  contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

  # Calculate the area of each contour
  areas = [cv2.contourArea(contour) for contour in contours]

  # Filter out small contours
  filtered_contours = [contour for contour, area in zip(contours, areas) if area > 50]

  # Return the number of filtered contours
  return len(filtered_contours)